/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.sicar.reporteador;

import com.sicar.reporteador.consum.Query;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.Scanner;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.web.reactive.function.client.WebClient;

public class PReporteador extends javax.swing.JPanel {

    private ReporteadorService service;
    public String consultaEditor;
    public JTextField text;

    public PReporteador() {
        initComponents();
        consumir();
//        invocar();
        //tabla.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        text = new JTextField();
        text.setBorder(null);

        //consultaEditor = editor.getText();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        buttonGenerar = new javax.swing.JButton();
        BActualizar = new javax.swing.JButton();
        BAgregar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        LDescripcion = new javax.swing.JLabel();
        LFecha = new javax.swing.JLabel();
        LNombre = new javax.swing.JLabel();
        panelPrueba = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        jPanel1.setBackground(new java.awt.Color(2, 114, 181));
        jPanel1.setPreferredSize(new java.awt.Dimension(767, 55));

        buttonGenerar.setBackground(new java.awt.Color(0, 153, 0));
        buttonGenerar.setForeground(new java.awt.Color(255, 255, 255));
        buttonGenerar.setText("Generar Excel");
        buttonGenerar.setMaximumSize(null);
        buttonGenerar.setMinimumSize(null);
        buttonGenerar.setPreferredSize(new java.awt.Dimension(135, 25));
        buttonGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerarActionPerformed(evt);
            }
        });

        BActualizar.setText("Actualizar");
        BActualizar.setMaximumSize(null);
        BActualizar.setMinimumSize(null);
        BActualizar.setPreferredSize(new java.awt.Dimension(135, 25));
        BActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BActualizarActionPerformed(evt);
            }
        });

        BAgregar.setText("Agregar");
        BAgregar.setMaximumSize(null);
        BAgregar.setMinimumSize(null);
        BAgregar.setPreferredSize(new java.awt.Dimension(135, 25));
        BAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BAgregarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonGenerar, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(BActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(BAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonGenerar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(255, 255, 255), new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(new java.awt.BorderLayout());

        LDescripcion.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        LDescripcion.setText("Descripcion");
        LDescripcion.setPreferredSize(new java.awt.Dimension(43, 15));
        jPanel2.add(LDescripcion, java.awt.BorderLayout.CENTER);

        LFecha.setText("Fecha");
        jPanel2.add(LFecha, java.awt.BorderLayout.PAGE_END);

        LNombre.setText("Nombre");
        jPanel2.add(LNombre, java.awt.BorderLayout.PAGE_START);

        panelPrueba.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(255, 255, 255), new java.awt.Color(0, 0, 0)));
        panelPrueba.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setViewportView(jTextPane1);

        panelPrueba.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelPrueba, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelPrueba, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(166, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    private void buttonGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerarActionPerformed
        Exporter obj;
        try {
            obj = new Exporter();
            obj.exportarExcel(tabla);
        } catch (IOException ex) {
            System.out.println("Error: " + ex);
        }
    }//GEN-LAST:event_buttonGenerarActionPerformed

    private void BActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BActualizarActionPerformed
        consumir();
    }//GEN-LAST:event_BActualizarActionPerformed

    private void BAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BAgregarActionPerformed
        AgregarReporte agr = new AgregarReporte(null, true);
        agr.setVisible(true);
    }//GEN-LAST:event_BAgregarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BActualizar;
    private javax.swing.JButton BAgregar;
    private javax.swing.JLabel LDescripcion;
    private javax.swing.JLabel LFecha;
    private javax.swing.JLabel LNombre;
    private javax.swing.JButton buttonGenerar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JPanel panelPrueba;
    // End of variables declaration//GEN-END:variables
    private javax.swing.JTable tabla;

    public void consumir() {
        try {

            URL url = new URL("http://localhost:8080/");
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            conn.connect();

            int responseCode = conn.getResponseCode();
            if (responseCode != 200) {
                DefaultTableModel dftm = new DefaultTableModel();
                throw new RuntimeException("ocurrio un error: " + responseCode);
            } else {
                StringBuilder informationQuery = new StringBuilder();
                Scanner scanner = new Scanner(url.openStream());

                while (scanner.hasNext()) {
                    informationQuery.append(scanner.nextLine());
                }
                scanner.close();
                String json = informationQuery.toString();
                System.out.println(json);

                JSONArray arrayJson = new JSONArray(json);

                for (int i = 0; i < arrayJson.length(); i++) {
                    JSONObject posiblequery = arrayJson.getJSONObject(i);
                    for (Object object : arrayJson) {
                        String nombre = posiblequery.getString("nombre");

                        
                        String descripcion = posiblequery.getString("descripcion");
                        String query = posiblequery.getString("query");
                        String fecha = posiblequery.getString("fecha");
                        fecha =fecha.replace("T", "   ");
                        Query que = new Query(null, nombre, descripcion, query,null);

//                        LNombre.setText(que.getNombre());
//                        LDescripcion.setText(que.getDescripcion());
//                        LFecha.setText(fecha);
                        jTextPane1.setText(nombre + "\n"
                                + descripcion + "\n"
                                + fecha + "\n"
                        );
                    }

//                    int id = posiblequery.getInt("id_query");
//                    String nombre =posiblequery.getString("nombre");
//                    String descripcion =posiblequery.getString("descripcion");
//                    String query =posiblequery.getString("query");
//                    String fecha =posiblequery.getString("fecha");
//                    Query q = new Query(id, nombre, descripcion, query, fecha);
//                    
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }


    public void eliminar_id() {
        //id
        for (int i = 0; i < tabla.getRowCount(); i++) {
            for (int j = 0; j < tabla.getColumnCount(); j++) {
                if (tabla.getColumnName(j).contains("_id")) {
                    tabla.removeColumn(tabla.getColumnModel().getColumn(j));
                }

            }
        }
    }

    public void eliminarSub() {
        for (int i = 0; i < tabla.getRowCount(); i++) {
            for (int j = 0; j < tabla.getColumnCount(); j++) {
                if (tabla.getColumnName(j).contains("sub")) {
                    tabla.removeColumn(tabla.getColumnModel().getColumn(j));
                }

            }
        }
    }

    public void eliminarstatus() {
        for (int i = 0; i < tabla.getRowCount(); i++) {
            for (int j = 0; j < tabla.getColumnCount(); j++) {
                if (tabla.getColumnName(j).contains("status") || tabla.getColumnName(j).contains("Status")) {
                    tabla.removeColumn(tabla.getColumnModel().getColumn(j));
                }

            }
        }
    }

    public void eliminarColumnasNulas() {
        for (int i = 0; i < tabla.getRowCount(); i++) {
            for (int j = 0; j < tabla.getColumnCount(); j++) {
                if (!tabla.getColumnName(j).equalsIgnoreCase("total")) {
                    if (tabla.getValueAt(i, j) == null) {

                        tabla.removeColumn(tabla.getColumnModel().getColumn(j));
                    }
                }

            }
        }
    }

    public void eliminarboolean() {
        for (int i = 1; i < tabla.getColumnCount(); i++) {
            for (int j = 0; j < tabla.getRowCount(); j++) {
                if (tabla.getValueAt(j, i) instanceof Boolean) {
                    tabla.removeColumn(tabla.getColumnModel().getColumn(i));
                }
            }
        }
    }

}
